package sarama_msk_wrapper

import (
	"encoding/base64"
	"testing"

	"github.com/rs/zerolog"
	"github.com/stretchr/testify/assert"
)

func TestToCoverConfigFile(t *testing.T) {
	SetLogLevel("warN")
	assert.Equal(t, zerolog.WarnLevel, _logLevel)
	SetLogLevel("debug")
	assert.Equal(t, zerolog.DebugLevel, _logLevel)
	SetLogLevel("info")
	assert.Equal(t, zerolog.InfoLevel, _logLevel)
	SetLogLevel("error")
	assert.Equal(t, zerolog.ErrorLevel, _logLevel)
	SetLogLevel("fatal")
	assert.Equal(t, zerolog.FatalLevel, _logLevel)
	SetLogLevel("panic")
	assert.Equal(t, zerolog.PanicLevel, _logLevel)
	SetLogLevel("nolevel")
	assert.Equal(t, zerolog.NoLevel, _logLevel)
	SetLogLevel("disabled")
	assert.Equal(t, zerolog.Disabled, _logLevel)
	SetLogLevel("trace")
	assert.Equal(t, zerolog.TraceLevel, _logLevel)
	noopFuncError(errForTests)
}

func getCerts(t *testing.T) ([]byte, []byte) {
	publicBase64 := "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCRENDQWV3Q0NRRHFvVm9aeERwU3lqQU5CZ2txaGtpRzl3MEJBUXNGQURCRU1Rc3dDUVlEVlFRR0V3SjEKY3pFTE1Ba0dBMVVFQ0F3Q1kyRXhGREFTQmdOVkJBY01DMnh2Y3lCaGJtZGxiR1Z6TVJJd0VBWURWUVFLREFsdAplV052YlhCaGJua3dIaGNOTWpNd05UQXhNVGMwTURReldoY05Nall3TVRJMU1UYzBNRFF6V2pCRU1Rc3dDUVlEClZRUUdFd0oxY3pFTE1Ba0dBMVVFQ0F3Q1kyRXhGREFTQmdOVkJBY01DMnh2Y3lCaGJtZGxiR1Z6TVJJd0VBWUQKVlFRS0RBbHRlV052YlhCaGJua3dnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDaQpKVVd3a2xzR2RETXJkZUNlSFNjbUNtS0x4Y2JJek94bWc2RjEwQmVENlVNdDRRZHFhUHpZM09ucVR0TWdkUjBICkgra0k1Qllzbi8zcXJyblJ4VWxYbExyQ0tjZlhScGNUZlhsTFk4QS90OEQ3K1pvOWNXYjhnR0toelJWWVg1YzQKWW5VZmJiMUxVU3VuVFJMaDN6VzVuWGl1RzlUMi90UDI1UW9vWjV4QUtLejVDcDJoUGg4cklWUEFiU1FzamtEcwpqckVsWEYxL080Wkc4TTh6bmxQMEJLSklFL2lyL2FKRnNjM2NQaGlEK0F3QXM5TFp1WXVpa0xjcGJDa0hqV0FVCk1ZbDdMUkp0OE1ZK1FqRlpJZmJKalNNZS9HQktKd1IzM3V5ZTJLVmhSU0g0K2xZRUQ1R0RtSU5teEdlOTZ2YzAKWUdXcXRNcktHb1AzZzVGRForQVJBZ01CQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFHL1BtbVZJL3BNZApqL0lxQXlWZ2JBTk1OdTFjUldtd0xhQWVmWWp4OE9UY2RlSG5aOWdyaVgyQVk5b2Q2anZBdW5IdXZhalVHVGJ2Ci9yYUQzVWxSYUE2bVZiQkorZ3JhNW1nbVlHakpWbDdmSzBmMjFKajIyV01leUQrbFQxSkNnKzVxQjhsQXFibDgKV0ttVVBLZXRuZitmaU9zYjNZVW5ySE85OGp6ODNmdWdXNHBsOVkzV2RhQ2ZiVW81a0kvMC8rMzFWWE4vaERvOQpLVzFyWkxZdWZhOGtKZnVYYjhiYitrUFo3MEc1bmI5L3F3WlphL01zWktvYzF1Z2RJSDdpbXZZczMyUCtZeEFQCnVJTFNoNWdxMVE1Mm5TdW9qZGhIR1V3K3M0VFBpY253MEtnRHpRN2hpclhpeG5rZkUwNWlJbGhtbk03QlNGYTEKWGMwZldsRHA4bVE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
	privateBase64 := "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBb2lWRnNKSmJCblF6SzNYZ25oMG5KZ3BpaThYR3lNenNab09oZGRBWGcrbERMZUVICmFtajgyTnpwNms3VElIVWRCeC9wQ09RV0xKLzk2cTY1MGNWSlY1UzZ3aW5IMTBhWEUzMTVTMlBBUDdmQSsvbWEKUFhGbS9JQmlvYzBWV0YrWE9HSjFIMjI5UzFFcnAwMFM0ZDgxdVoxNHJodlU5djdUOXVVS0tHZWNRQ2lzK1FxZApvVDRmS3lGVHdHMGtMSTVBN0k2eEpWeGRmenVHUnZEUE01NVQ5QVNpU0JQNHEvMmlSYkhOM0Q0WWcvZ01BTFBTCjJibUxvcEMzS1d3cEI0MWdGREdKZXkwU2JmREdQa0l4V1NIMnlZMGpIdnhnU2ljRWQ5N3NudGlsWVVVaCtQcFcKQkErUmc1aURac1JudmVyM05HQmxxclRLeWhxRDk0T1JRMmZnRVFJREFRQUJBb0lCQVFDTGhIUzFuUWt6d1hKeQpGK2loUkVaMlJnTkxiMjgvUW95N0hOSW1ORnEzaDFQbHV6WU5TcThkenVCN1d6M3hOTFE0ZUMybEY5VTRxcVhxCmRGT3hld2REazljcTBKYUMxdHVSeXFvK3cyTWRzSGdlbUVRdVVGQ2tQYmdncnYySjRCNlhScWl1MVZkRzRsNGsKZzM0VzJtQTVDWlZZZ3R3NWQwVmRzUENQbWE5cHgvZEM0MjBwUmtqTEplV0tCYlk2amJ0Vzc3azV5Zi9oZU1pUAozeUF6aHc5bHN1MEtnaEFFRzhrNkZhL2piRmozcVFyN2dRaXdLWVdMak9NaHdFUTNaMThnY04zNjZPOXBhWEYyCjI4OVRSeEFZcHQxbUdFWkRFeDF4b284T0JJVUpvZlA5Uk4zeHZZU2pHYmQzTEpnY3czZG9DUVBVeUhLTjluQXcKeERnS2xVbjlBb0dCQU5Qbk5Fd3A1aG1MTEticjc2R0g5SEhteXBVZEJ1UFlBZHJqRCt5Wjd5eitsL0RWb2R2NgpXTHhKMlFCK0U1T0w4SThuN2pvQ1Vma0NUMUlEVFl1aisyeEREK3hXb3JLdHljenM4VWlhTElpK2lSNVdLdjhWCmF4aFhDeFJoQk5tYzlRKzI4cHVWTWdJKzk1MkNhd3VHbHJ6dUdOUXFjOGMxLytkQmZjdTdwQmp2QW9HQkFNUGoKVU1BQlprdHBneDE2czh1WVluT2hVZFdyUHVROEluQ0ZQZ3R1cDhvQkZlOStmNDV2cFh1RG1DWEJnek9IMUdtcwpTWFkwK05kSTJadjFid2IzYUluZndpTUhqZ0pHcEhkY3BvZytsUmwvRWM5bTVKQWdoOUp5dHhZL1FUWmF3VWFaCm0xZFluQThGdThRZ1B2cUJnRVYyY3VERktVbXQ0RVJPMHRHTEdaYi9Bb0dBT1FobWZBVmU2QXNjWm9Ua0J6N1gKWFB5NEU3QXZWWTJpMmkzNDhENXlNRk1KeEFsTHVqQkVSOUU4ZGJSNVFtSU15Z3IrUkdDeGZXclF2SXNsQ091RwoxUm1ycEhtZzZxUjV4dzBTMSs2ZkErTDhkc3pNWDhGOUJKMFEzMWhKZk9TUTFMenh5VXc3bkgwa0dpR3ErL3dxCmdBazVaNGxSaGhHVG9jTnZ2ekR1dHNNQ2dZQi9mYzBxaWo2bnlrNVp1MmlWaytKUDI2akZaaVVTcXNqSGJ4RUkKbzhaMHhPd2Y2YmJmWDI3V3lya1ZxYkxZc1FqZ2xnOWg3ZXdmUWZ6UGNwZ0djclFKT0NiRVljQmRYdGpnRHQ4YwpRWThNL3hUNlpiOVF4cnRmanVYMmhzak10WmloZUl3UDkwM3F3UktKL1dxLzQ5VTJZSGM0TDFwRjUvTFV3bkNYCmpPN2t4UUtCZ1FDTzlubEUyY3czRjUyaHVwc1ZSY0tKWXIwOWhVQ1ZEcWV1SlJrSXpnZWN5TnNnaTVDc3E4clcKRmpCOHVNUWxjUHpsbHZ4NndlZVJJZW5xcW9hUThVYWk0cjZKMjdUNEI4QWoweG1zRWZVbWdGcy9id0FlRlYrdwo2b0tacEpnOHYvRGNET3pUREMrUUZrVTc1emt1WjJUVTJPMmR5T013dWcyR0lxeHljVThBcmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
	pubKey, err := base64.StdEncoding.DecodeString(publicBase64)
	assert.Nil(t, err)
	privateKey, err := base64.StdEncoding.DecodeString(privateBase64)
	assert.Nil(t, err)
	return pubKey, privateKey
}

type errEncoder int

func (e errEncoder) Encode() ([]byte, error) { return []byte{}, errForTests }

func (e errEncoder) Length() int { return int(e) }
