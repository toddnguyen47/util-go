// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocktestify_sarama_msk_wrapper

import (
	sarama "github.com/IBM/sarama"
	mock "github.com/stretchr/testify/mock"
)

// MockAsyncProducerWrapper is an autogenerated mock type for the AsyncProducerWrapper type
type MockAsyncProducerWrapper struct {
	mock.Mock
}

type MockAsyncProducerWrapper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAsyncProducerWrapper) EXPECT() *MockAsyncProducerWrapper_Expecter {
	return &MockAsyncProducerWrapper_Expecter{mock: &_m.Mock}
}

// GetAsyncProducer provides a mock function with no fields
func (_m *MockAsyncProducerWrapper) GetAsyncProducer() sarama.AsyncProducer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAsyncProducer")
	}

	var r0 sarama.AsyncProducer
	if rf, ok := ret.Get(0).(func() sarama.AsyncProducer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sarama.AsyncProducer)
		}
	}

	return r0
}

// MockAsyncProducerWrapper_GetAsyncProducer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAsyncProducer'
type MockAsyncProducerWrapper_GetAsyncProducer_Call struct {
	*mock.Call
}

// GetAsyncProducer is a helper method to define mock.On call
func (_e *MockAsyncProducerWrapper_Expecter) GetAsyncProducer() *MockAsyncProducerWrapper_GetAsyncProducer_Call {
	return &MockAsyncProducerWrapper_GetAsyncProducer_Call{Call: _e.mock.On("GetAsyncProducer")}
}

func (_c *MockAsyncProducerWrapper_GetAsyncProducer_Call) Run(run func()) *MockAsyncProducerWrapper_GetAsyncProducer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAsyncProducerWrapper_GetAsyncProducer_Call) Return(_a0 sarama.AsyncProducer) *MockAsyncProducerWrapper_GetAsyncProducer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAsyncProducerWrapper_GetAsyncProducer_Call) RunAndReturn(run func() sarama.AsyncProducer) *MockAsyncProducerWrapper_GetAsyncProducer_Call {
	_c.Call.Return(run)
	return _c
}

// GetEnqueuedCount provides a mock function with no fields
func (_m *MockAsyncProducerWrapper) GetEnqueuedCount() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEnqueuedCount")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockAsyncProducerWrapper_GetEnqueuedCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnqueuedCount'
type MockAsyncProducerWrapper_GetEnqueuedCount_Call struct {
	*mock.Call
}

// GetEnqueuedCount is a helper method to define mock.On call
func (_e *MockAsyncProducerWrapper_Expecter) GetEnqueuedCount() *MockAsyncProducerWrapper_GetEnqueuedCount_Call {
	return &MockAsyncProducerWrapper_GetEnqueuedCount_Call{Call: _e.mock.On("GetEnqueuedCount")}
}

func (_c *MockAsyncProducerWrapper_GetEnqueuedCount_Call) Run(run func()) *MockAsyncProducerWrapper_GetEnqueuedCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAsyncProducerWrapper_GetEnqueuedCount_Call) Return(_a0 int) *MockAsyncProducerWrapper_GetEnqueuedCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAsyncProducerWrapper_GetEnqueuedCount_Call) RunAndReturn(run func() int) *MockAsyncProducerWrapper_GetEnqueuedCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetErrorCount provides a mock function with no fields
func (_m *MockAsyncProducerWrapper) GetErrorCount() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetErrorCount")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockAsyncProducerWrapper_GetErrorCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetErrorCount'
type MockAsyncProducerWrapper_GetErrorCount_Call struct {
	*mock.Call
}

// GetErrorCount is a helper method to define mock.On call
func (_e *MockAsyncProducerWrapper_Expecter) GetErrorCount() *MockAsyncProducerWrapper_GetErrorCount_Call {
	return &MockAsyncProducerWrapper_GetErrorCount_Call{Call: _e.mock.On("GetErrorCount")}
}

func (_c *MockAsyncProducerWrapper_GetErrorCount_Call) Run(run func()) *MockAsyncProducerWrapper_GetErrorCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAsyncProducerWrapper_GetErrorCount_Call) Return(_a0 int) *MockAsyncProducerWrapper_GetErrorCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAsyncProducerWrapper_GetErrorCount_Call) RunAndReturn(run func() int) *MockAsyncProducerWrapper_GetErrorCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetSuccessCount provides a mock function with no fields
func (_m *MockAsyncProducerWrapper) GetSuccessCount() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSuccessCount")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockAsyncProducerWrapper_GetSuccessCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSuccessCount'
type MockAsyncProducerWrapper_GetSuccessCount_Call struct {
	*mock.Call
}

// GetSuccessCount is a helper method to define mock.On call
func (_e *MockAsyncProducerWrapper_Expecter) GetSuccessCount() *MockAsyncProducerWrapper_GetSuccessCount_Call {
	return &MockAsyncProducerWrapper_GetSuccessCount_Call{Call: _e.mock.On("GetSuccessCount")}
}

func (_c *MockAsyncProducerWrapper_GetSuccessCount_Call) Run(run func()) *MockAsyncProducerWrapper_GetSuccessCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAsyncProducerWrapper_GetSuccessCount_Call) Return(_a0 int) *MockAsyncProducerWrapper_GetSuccessCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAsyncProducerWrapper_GetSuccessCount_Call) RunAndReturn(run func() int) *MockAsyncProducerWrapper_GetSuccessCount_Call {
	_c.Call.Return(run)
	return _c
}

// HasClosed provides a mock function with no fields
func (_m *MockAsyncProducerWrapper) HasClosed() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasClosed")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockAsyncProducerWrapper_HasClosed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasClosed'
type MockAsyncProducerWrapper_HasClosed_Call struct {
	*mock.Call
}

// HasClosed is a helper method to define mock.On call
func (_e *MockAsyncProducerWrapper_Expecter) HasClosed() *MockAsyncProducerWrapper_HasClosed_Call {
	return &MockAsyncProducerWrapper_HasClosed_Call{Call: _e.mock.On("HasClosed")}
}

func (_c *MockAsyncProducerWrapper_HasClosed_Call) Run(run func()) *MockAsyncProducerWrapper_HasClosed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAsyncProducerWrapper_HasClosed_Call) Return(_a0 bool) *MockAsyncProducerWrapper_HasClosed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAsyncProducerWrapper_HasClosed_Call) RunAndReturn(run func() bool) *MockAsyncProducerWrapper_HasClosed_Call {
	_c.Call.Return(run)
	return _c
}

// PublishMessage provides a mock function with given fields: message
func (_m *MockAsyncProducerWrapper) PublishMessage(message sarama.ProducerMessage) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for PublishMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(sarama.ProducerMessage) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAsyncProducerWrapper_PublishMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishMessage'
type MockAsyncProducerWrapper_PublishMessage_Call struct {
	*mock.Call
}

// PublishMessage is a helper method to define mock.On call
//   - message sarama.ProducerMessage
func (_e *MockAsyncProducerWrapper_Expecter) PublishMessage(message interface{}) *MockAsyncProducerWrapper_PublishMessage_Call {
	return &MockAsyncProducerWrapper_PublishMessage_Call{Call: _e.mock.On("PublishMessage", message)}
}

func (_c *MockAsyncProducerWrapper_PublishMessage_Call) Run(run func(message sarama.ProducerMessage)) *MockAsyncProducerWrapper_PublishMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sarama.ProducerMessage))
	})
	return _c
}

func (_c *MockAsyncProducerWrapper_PublishMessage_Call) Return(_a0 error) *MockAsyncProducerWrapper_PublishMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAsyncProducerWrapper_PublishMessage_Call) RunAndReturn(run func(sarama.ProducerMessage) error) *MockAsyncProducerWrapper_PublishMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function with given fields: message
func (_m *MockAsyncProducerWrapper) SendMessage(message sarama.ProducerMessage) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(sarama.ProducerMessage) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAsyncProducerWrapper_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type MockAsyncProducerWrapper_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - message sarama.ProducerMessage
func (_e *MockAsyncProducerWrapper_Expecter) SendMessage(message interface{}) *MockAsyncProducerWrapper_SendMessage_Call {
	return &MockAsyncProducerWrapper_SendMessage_Call{Call: _e.mock.On("SendMessage", message)}
}

func (_c *MockAsyncProducerWrapper_SendMessage_Call) Run(run func(message sarama.ProducerMessage)) *MockAsyncProducerWrapper_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sarama.ProducerMessage))
	})
	return _c
}

func (_c *MockAsyncProducerWrapper_SendMessage_Call) Return(_a0 error) *MockAsyncProducerWrapper_SendMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAsyncProducerWrapper_SendMessage_Call) RunAndReturn(run func(sarama.ProducerMessage) error) *MockAsyncProducerWrapper_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SetErrorHandlingFunction provides a mock function with given fields: myFunc
func (_m *MockAsyncProducerWrapper) SetErrorHandlingFunction(myFunc func(*sarama.ProducerError)) {
	_m.Called(myFunc)
}

// MockAsyncProducerWrapper_SetErrorHandlingFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetErrorHandlingFunction'
type MockAsyncProducerWrapper_SetErrorHandlingFunction_Call struct {
	*mock.Call
}

// SetErrorHandlingFunction is a helper method to define mock.On call
//   - myFunc func(*sarama.ProducerError)
func (_e *MockAsyncProducerWrapper_Expecter) SetErrorHandlingFunction(myFunc interface{}) *MockAsyncProducerWrapper_SetErrorHandlingFunction_Call {
	return &MockAsyncProducerWrapper_SetErrorHandlingFunction_Call{Call: _e.mock.On("SetErrorHandlingFunction", myFunc)}
}

func (_c *MockAsyncProducerWrapper_SetErrorHandlingFunction_Call) Run(run func(myFunc func(*sarama.ProducerError))) *MockAsyncProducerWrapper_SetErrorHandlingFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*sarama.ProducerError)))
	})
	return _c
}

func (_c *MockAsyncProducerWrapper_SetErrorHandlingFunction_Call) Return() *MockAsyncProducerWrapper_SetErrorHandlingFunction_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAsyncProducerWrapper_SetErrorHandlingFunction_Call) RunAndReturn(run func(func(*sarama.ProducerError))) *MockAsyncProducerWrapper_SetErrorHandlingFunction_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *MockAsyncProducerWrapper) Start() {
	_m.Called()
}

// MockAsyncProducerWrapper_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockAsyncProducerWrapper_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockAsyncProducerWrapper_Expecter) Start() *MockAsyncProducerWrapper_Start_Call {
	return &MockAsyncProducerWrapper_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockAsyncProducerWrapper_Start_Call) Run(run func()) *MockAsyncProducerWrapper_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAsyncProducerWrapper_Start_Call) Return() *MockAsyncProducerWrapper_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAsyncProducerWrapper_Start_Call) RunAndReturn(run func()) *MockAsyncProducerWrapper_Start_Call {
	_c.Run(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockAsyncProducerWrapper) Stop() {
	_m.Called()
}

// MockAsyncProducerWrapper_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockAsyncProducerWrapper_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockAsyncProducerWrapper_Expecter) Stop() *MockAsyncProducerWrapper_Stop_Call {
	return &MockAsyncProducerWrapper_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockAsyncProducerWrapper_Stop_Call) Run(run func()) *MockAsyncProducerWrapper_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAsyncProducerWrapper_Stop_Call) Return() *MockAsyncProducerWrapper_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAsyncProducerWrapper_Stop_Call) RunAndReturn(run func()) *MockAsyncProducerWrapper_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockAsyncProducerWrapper creates a new instance of MockAsyncProducerWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAsyncProducerWrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAsyncProducerWrapper {
	mock := &MockAsyncProducerWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
