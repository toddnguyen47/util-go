// Code generated by MockGen. DO NOT EDIT.
// Source: consumergroup_interface.go
//
// Generated by this command:
//
//	mockgen -package sarama_msk_wrapper_mocks -source consumergroup_interface.go -destination mocks/consumergroup_mocks.go
//

// Package sarama_msk_wrapper_mocks is a generated GoMock package.
package sarama_msk_wrapper_mocks

import (
	reflect "reflect"

	sarama "github.com/IBM/sarama"
	gomock "go.uber.org/mock/gomock"
)

// MockConsumerWrapper is a mock of ConsumerWrapper interface.
type MockConsumerWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerWrapperMockRecorder
}

// MockConsumerWrapperMockRecorder is the mock recorder for MockConsumerWrapper.
type MockConsumerWrapperMockRecorder struct {
	mock *MockConsumerWrapper
}

// NewMockConsumerWrapper creates a new mock instance.
func NewMockConsumerWrapper(ctrl *gomock.Controller) *MockConsumerWrapper {
	mock := &MockConsumerWrapper{ctrl: ctrl}
	mock.recorder = &MockConsumerWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerWrapper) EXPECT() *MockConsumerWrapperMockRecorder {
	return m.recorder
}

// GetConsumerGroup mocks base method.
func (m *MockConsumerWrapper) GetConsumerGroup() sarama.ConsumerGroup {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumerGroup")
	ret0, _ := ret[0].(sarama.ConsumerGroup)
	return ret0
}

// GetConsumerGroup indicates an expected call of GetConsumerGroup.
func (mr *MockConsumerWrapperMockRecorder) GetConsumerGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumerGroup", reflect.TypeOf((*MockConsumerWrapper)(nil).GetConsumerGroup))
}

// GetErrorCount mocks base method.
func (m *MockConsumerWrapper) GetErrorCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetErrorCount indicates an expected call of GetErrorCount.
func (mr *MockConsumerWrapperMockRecorder) GetErrorCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorCount", reflect.TypeOf((*MockConsumerWrapper)(nil).GetErrorCount))
}

// HasStopped mocks base method.
func (m *MockConsumerWrapper) HasStopped() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasStopped")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasStopped indicates an expected call of HasStopped.
func (mr *MockConsumerWrapperMockRecorder) HasStopped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasStopped", reflect.TypeOf((*MockConsumerWrapper)(nil).HasStopped))
}

// SetErrorHandlingFunction mocks base method.
func (m *MockConsumerWrapper) SetErrorHandlingFunction(myFunc func(error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErrorHandlingFunction", myFunc)
}

// SetErrorHandlingFunction indicates an expected call of SetErrorHandlingFunction.
func (mr *MockConsumerWrapperMockRecorder) SetErrorHandlingFunction(myFunc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErrorHandlingFunction", reflect.TypeOf((*MockConsumerWrapper)(nil).SetErrorHandlingFunction), myFunc)
}

// Start mocks base method.
func (m *MockConsumerWrapper) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockConsumerWrapperMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockConsumerWrapper)(nil).Start))
}

// Stop mocks base method.
func (m *MockConsumerWrapper) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockConsumerWrapperMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockConsumerWrapper)(nil).Stop))
}
