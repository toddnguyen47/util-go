// Code generated by MockGen. DO NOT EDIT.
// Source: asyncproducer_interface.go
//
// Generated by this command:
//
//	mockgen -source asyncproducer_interface.go -destination mocks/asyncproducer_interface_mocks.go -package sarama_msk_wrapper_mocks
//

// Package sarama_msk_wrapper_mocks is a generated GoMock package.
package sarama_msk_wrapper_mocks

import (
	reflect "reflect"

	sarama "github.com/IBM/sarama"
	gomock "go.uber.org/mock/gomock"
)

// MockAsyncProducerWrapper is a mock of AsyncProducerWrapper interface.
type MockAsyncProducerWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockAsyncProducerWrapperMockRecorder
}

// MockAsyncProducerWrapperMockRecorder is the mock recorder for MockAsyncProducerWrapper.
type MockAsyncProducerWrapperMockRecorder struct {
	mock *MockAsyncProducerWrapper
}

// NewMockAsyncProducerWrapper creates a new mock instance.
func NewMockAsyncProducerWrapper(ctrl *gomock.Controller) *MockAsyncProducerWrapper {
	mock := &MockAsyncProducerWrapper{ctrl: ctrl}
	mock.recorder = &MockAsyncProducerWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsyncProducerWrapper) EXPECT() *MockAsyncProducerWrapperMockRecorder {
	return m.recorder
}

// GetAsyncProducer mocks base method.
func (m *MockAsyncProducerWrapper) GetAsyncProducer() sarama.AsyncProducer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsyncProducer")
	ret0, _ := ret[0].(sarama.AsyncProducer)
	return ret0
}

// GetAsyncProducer indicates an expected call of GetAsyncProducer.
func (mr *MockAsyncProducerWrapperMockRecorder) GetAsyncProducer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsyncProducer", reflect.TypeOf((*MockAsyncProducerWrapper)(nil).GetAsyncProducer))
}

// GetEnqueuedCount mocks base method.
func (m *MockAsyncProducerWrapper) GetEnqueuedCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnqueuedCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetEnqueuedCount indicates an expected call of GetEnqueuedCount.
func (mr *MockAsyncProducerWrapperMockRecorder) GetEnqueuedCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnqueuedCount", reflect.TypeOf((*MockAsyncProducerWrapper)(nil).GetEnqueuedCount))
}

// GetErrorCount mocks base method.
func (m *MockAsyncProducerWrapper) GetErrorCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetErrorCount indicates an expected call of GetErrorCount.
func (mr *MockAsyncProducerWrapperMockRecorder) GetErrorCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorCount", reflect.TypeOf((*MockAsyncProducerWrapper)(nil).GetErrorCount))
}

// GetSuccessCount mocks base method.
func (m *MockAsyncProducerWrapper) GetSuccessCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuccessCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetSuccessCount indicates an expected call of GetSuccessCount.
func (mr *MockAsyncProducerWrapperMockRecorder) GetSuccessCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuccessCount", reflect.TypeOf((*MockAsyncProducerWrapper)(nil).GetSuccessCount))
}

// HasClosed mocks base method.
func (m *MockAsyncProducerWrapper) HasClosed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasClosed indicates an expected call of HasClosed.
func (mr *MockAsyncProducerWrapperMockRecorder) HasClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasClosed", reflect.TypeOf((*MockAsyncProducerWrapper)(nil).HasClosed))
}

// PublishMessage mocks base method.
func (m *MockAsyncProducerWrapper) PublishMessage(message sarama.ProducerMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMessage", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMessage indicates an expected call of PublishMessage.
func (mr *MockAsyncProducerWrapperMockRecorder) PublishMessage(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMessage", reflect.TypeOf((*MockAsyncProducerWrapper)(nil).PublishMessage), message)
}

// SendMessage mocks base method.
func (m *MockAsyncProducerWrapper) SendMessage(message sarama.ProducerMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockAsyncProducerWrapperMockRecorder) SendMessage(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockAsyncProducerWrapper)(nil).SendMessage), message)
}

// SetErrorHandlingFunction mocks base method.
func (m *MockAsyncProducerWrapper) SetErrorHandlingFunction(myFunc func(error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErrorHandlingFunction", myFunc)
}

// SetErrorHandlingFunction indicates an expected call of SetErrorHandlingFunction.
func (mr *MockAsyncProducerWrapperMockRecorder) SetErrorHandlingFunction(myFunc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErrorHandlingFunction", reflect.TypeOf((*MockAsyncProducerWrapper)(nil).SetErrorHandlingFunction), myFunc)
}

// Start mocks base method.
func (m *MockAsyncProducerWrapper) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockAsyncProducerWrapperMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockAsyncProducerWrapper)(nil).Start))
}

// Stop mocks base method.
func (m *MockAsyncProducerWrapper) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockAsyncProducerWrapperMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockAsyncProducerWrapper)(nil).Stop))
}
